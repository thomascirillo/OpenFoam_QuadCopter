/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       true;

// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    crazyflieBody
    {
        type triSurfaceMesh;
        file "crazyflieBody.stl";
    }
    
    rotor1
    {
        type triSurfaceMesh;
        file "rotor1.stl";
    }
    
    rotor2
    {
        type triSurfaceMesh;
        file "rotor2.stl";
    }
    
    rotor3
    {
        type triSurfaceMesh;
        file "rotor3.stl";
    }
    
    rotor4
    {
        type triSurfaceMesh;
        file "rotor4.stl";
    }
    
    refinementBox
    {
        type searchableBox;
        min (-0.05 -0.05 -0.02);
        max (0.05 0.05 0.02);
    }
    
    wakeRefinementBox
    {
        type searchableBox;
        min (-0.05 -0.05 -0.02);
        max (0.1 0.05 0.02);
    }
    
    rotorRefinementBox1
    {
        type searchableCylinder;
        point1 (0.02 0.02 -0.01);
        point2 (0.02 0.02 0.01);
        radius 0.01;
    }
    
    rotorRefinementBox2
    {
        type searchableCylinder;
        point1 (-0.02 0.02 -0.01);
        point2 (-0.02 0.02 0.01);
        radius 0.01;
    }
    
    rotorRefinementBox3
    {
        type searchableCylinder;
        point1 (-0.02 -0.02 -0.01);
        point2 (-0.02 -0.02 0.01);
        radius 0.01;
    }
    
    rotorRefinementBox4
    {
        type searchableCylinder;
        point1 (0.02 -0.02 -0.01);
        point2 (0.02 -0.02 0.01);
        radius 0.01;
    }

    // Add a high-resolution zone around the entire drone
    droneZone
    {
        type searchableCylinder;
        point1 (0 0 -0.015);
        point2 (0 0 0.015);
        radius 0.04;
    }
}

// Settings for the castellatedMesh generation.
castellatedMeshControls
{
    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // While refining maximum number of cells per processor. This is basically
    // the number of cells that fit on a processor. If you choose this too small
    // it will do just more refinement iterations to obtain the same
    // refinement level.
    maxLocalCells 2000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 5000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 20;

    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 3;

    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        {
            file "crazyflieBody.eMesh";
            level 3;
        }
        {
            file "rotor1.eMesh";
            level 4;
        }
        {
            file "rotor2.eMesh";
            level 4;
        }
        {
            file "rotor3.eMesh";
            level 4;
        }
        {
            file "rotor4.eMesh";
            level 4;
        }
    );

    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        crazyflieBody
        {
            // Surface-wise min and max refinement level
            level (2 3);
        }
        
        rotor1
        {
            level (3 4);
            faceZone rotor1;
            cellZone rotor1Zone;
            cellZoneInside inside;
        }
        
        rotor2
        {
            level (3 4);
            faceZone rotor2;
            cellZone rotor2Zone;
            cellZoneInside inside;
        }
        
        rotor3
        {
            level (3 4);
            faceZone rotor3;
            cellZone rotor3Zone;
            cellZoneInside inside;
        }
        
        rotor4
        {
            level (3 4);
            faceZone rotor4;
            cellZone rotor4Zone;
            cellZoneInside inside;
        }
    }

    // Resolve sharp angles on refined surface patches?
    resolveFeatureAngle 30;

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        refinementBox
        {
            mode inside;
            levels ((1 2));
        }
        
        wakeRefinementBox
        {
            mode inside;
            levels ((1 2));
        }
        
        rotorRefinementBox1
        {
            mode inside;
            levels ((1 3));
        }
        
        rotorRefinementBox2
        {
            mode inside;
            levels ((1 3));
        }
        
        rotorRefinementBox3
        {
            mode inside;
            levels ((1 3));
        }
        
        rotorRefinementBox4
        {
            mode inside;
            levels ((1 3));
        }
        
        droneZone
        {
            mode inside;
            levels ((1 2));
        }
    }

    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (0.001 0.001 0.001);  // Slight offset from (0,0,0)

    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces true;
}

// Settings for the snapping.
snapControls
{
    // Number of patch smoothing iterations before finding correspondence
    // to surface
    nSmoothPatch 3;

    // Maximum relative distance for points to be attracted by surface.
    // True distance is this factor times local maximum edge length.
    // Note: changed(corrected) w.r.t 17x! (17x used 2* tolerance)
    tolerance 1.5;

    // Number of mesh displacement relaxation iterations.
    nSolveIter 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 5;

    // Feature snapping

        // Number of feature edge snapping iterations.
        // Leave out altogether to disable.
        nFeatureSnapIter 10;

        // Detect (geometric) features by sampling the surface
        // (default=false).
        implicitFeatureSnap false;

        // Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap true;

        // Detect features between multiple surfaces
        // (only for explicitFeatureSnap, default = false)
        multiRegionFeatureSnap false;
}

// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;

    // Per final patch (so not geometry!) the layer information
    layers
    {
        crazyflieBody
        {
            nSurfaceLayers 3;
        }
        
        rotor1
        {
            nSurfaceLayers 3;
        }
        
        rotor2
        {
            nSurfaceLayers 3;
        }
        
        rotor3
        {
            nSurfaceLayers 3;
        }
        
        rotor4
        {
            nSurfaceLayers 3;
        }
    }

    // Expansion factor for layer mesh
    expansionRatio 1.2;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    finalLayerThickness 0.4;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // See relativeSizes parameter.
    minThickness 0.1;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    nGrow 0;

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // make straight angle.
    featureAngle 45;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 5;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    minMedialAxisAngle 90;

    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;

    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;
}

// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    // Maximum non-orthogonality allowed. Set to 180 to disable.
    maxNonOrtho 60;

    // Max skewness allowed. Set to <0 to disable.
    maxBoundarySkewness 15;
    maxInternalSkewness 3;

    // Max concaveness allowed. Is angle (in degrees) below which concavity
    // is allowed. 0 is straight face, <0 would be convex face.
    // Set to 180 to disable.
    maxConcave 70;

    // Minimum pyramid volume. Is absolute volume of cell pyramid.
    // Set to a sensible fraction of the smallest cell volume expected.
    // Set to very negative number (e.g. -1E30) to disable.
    minVol 1e-15;

    // Minimum quality of the tet formed by the face-centre
    // and variable base point minimum decomposition triangles and
    // the cell centre. Set to very negative number (e.g. -1E30) to
    // disable.
    minTetQuality 1e-20;

    // Minimum face area. Set to <0 to disable.
    minArea -1;

    // Minimum face twist. Set to <-1 to disable. dot product of face normal
    // and face centre triangles normal
    minTwist 0.05;

    // Minimum normalised cell determinant. This is the determinant of all
    // the areas of internal faces. It is a measure of how much of the
    // outside area of the cell is to the inside. Inside out cells have
    // negative determinant.
    minDeterminant 0.0001;

    // Relative position of face in relation to cell centres, 0 is closest
    // to the cell centre, 1 furthest away. Set to <0 to disable.
    minFaceWeight 0.02;

    // Volume ratio of neighbouring cells. Set to <0 to disable.
    minVolRatio 0.01;

    // Minimum alignment angle between normals of two adjacent cells.
    // Default is 0 (always accept). 0 degrees is parallel, 180 is opposite.
    // Set to 180 to disable.
    minNormAlignment 0;

    // Minimum triangle twist for surface triangles. Set to <-1 to disable.
    minTriangleTwist -1;

    // if >0 : preserve single cells with all points on the surface if the
    // resulting volume after snapping (by approximation) is larger than
    // minVolCollapseRatio times old volume (i.e. not collapsed to flat cell).
    // If <0 : delete always.
    //minVolCollapseRatio 0.1;

    // Number of error distribution iterations
    nSmoothScale 4;
    // Amount to scale back displacement at error points
    errorReduction 0.75;
}

// Advanced

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;

// ************************************************************************* //